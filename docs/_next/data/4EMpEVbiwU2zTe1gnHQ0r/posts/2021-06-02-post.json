{"pageProps":{"post":{"title":"ソフトウェア品質を高める開発者テスト アジャイル時代の実践的・効率的なテストのやり方","date":"2021-06-02","slug":"2021-06-02-post","author":{"name":"GeroOf","picture":"/assets/blog/authors/geroof.png"},"content":"<iframe style=\"width:120px;height:240px;\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=gyokojp-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4798165034&linkId=bb866d410edc5278dcef211c1c32e3de\"></iframe>\n<p>記載されている個々のプロセス自体は他の本・媒体でも記載されているものがほとんどだが、ソフトウェア品質を上げるためにまずはじめにやることは何かがある程度わかる</p>\n<ul>\n<li>境界値・状態遷移テストは重要</li>\n<li>組み合わせテストの採用は気をつけてやること(やったつもりになるため)</li>\n<li>複雑度の高いコード(制御構造の多い)でテストを作ると効果が高い</li>\n<li>テストは継続的インテグレーションで回す</li>\n<li>キャプチャ＆リプレイの自動テストはNG(メンテコストがでかい)</li>\n<li>できればアジャイル(スクラム)を採用して、デイリースクラムでレビュー・ユニットテスト・リファクタリングができるとよい</li>\n<li>ユニットテストを増やして、システムテストの割合を極力減らす</li>\n<li>MVCのMCはユニットテストで、Vは探索的テスト</li>\n</ul>","ogImage":{"url":"/assets/blog/authors/geroof.png"}}},"__N_SSG":true}