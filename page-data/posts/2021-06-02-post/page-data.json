{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2021-06-02-post/","result":{"data":{"site":{"siteMetadata":{"title":"GeroOf MyPage"}},"markdownRemark":{"id":"2cff605d-90c8-5128-aa30-df8937c2b535","excerpt":"…","html":"<iframe style=\"width:120px;height:240px;\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=gyokojp-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4798165034&linkId=bb866d410edc5278dcef211c1c32e3de\"></iframe>\n<p>記載されている個々のプロセス自体は他の本・媒体でも記載されているものがほとんどだが、ソフトウェア品質を上げるためにまずはじめにやることは何かがある程度わかる</p>\n<ul>\n<li>境界値・状態遷移テストは重要</li>\n<li>組み合わせテストの採用は気をつけてやること(やったつもりになるため)</li>\n<li>複雑度の高いコード(制御構造の多い)でテストを作ると効果が高い</li>\n<li>テストは継続的インテグレーションで回す</li>\n<li>キャプチャ＆リプレイの自動テストはNG(メンテコストがでかい)</li>\n<li>できればアジャイル(スクラム)を採用して、デイリースクラムでレビュー・ユニットテスト・リファクタリングができるとよい</li>\n<li>ユニットテストを増やして、システムテストの割合を極力減らす</li>\n<li>MVCのMCはユニットテストで、Vは探索的テスト</li>\n</ul>","frontmatter":{"title":"ソフトウェア品質を高める開発者テスト アジャイル時代の実践的・効率的なテストのやり方","date":"2021/06/02","description":null}},"previous":{"fields":{"slug":"/posts/2021-05-05-post/"},"frontmatter":{"title":"モノリスからマイクロサービスへ ―モノリスを進化させる実践移行ガイド"}},"next":{"fields":{"slug":"/posts/2021-06-19-post/"},"frontmatter":{"title":"ユニコーン企業のひみつ"}}},"pageContext":{"id":"2cff605d-90c8-5128-aa30-df8937c2b535","previousPostId":"24e51cd8-ea2a-5076-ad3b-432f892cc6d9","nextPostId":"14aea02a-cd6f-5244-9944-67647da1e600"}},"staticQueryHashes":["2841359383","3257411868"]}